import com.example.android.strikingarts.domain.model.MovementType;
import com.example.android.strikingarts.domain.model.TechniqueType;

CREATE TABLE IF NOT EXISTS `TechniqueTable`(
    `techniqueId` INTEGER PRIMARY KEY,
    `name` TEXT NOT NULL,
    `num` TEXT NOT NULL,
    `movementType` TEXT AS MovementType NOT NULL,
    `techniqueType` TEXT AS TechniqueType NOT NULL,
    `audioAttributesId` INTEGER,
    `color` TEXT,
    FOREIGN KEY (`audioAttributesId`) REFERENCES `AudioAttributesTable`(`audioAttributesId`)
        ON UPDATE CASCADE
        ON DELETE SET NULL
);

CREATE INDEX IF NOT EXISTS `indexAudioAttributesId`
ON `TechniqueTable` (`audioAttributesId`) WHERE `audioAttributesId` IS NOT NULL;

CREATE TRIGGER IF NOT EXISTS `removeUnusedAudioAttributesAfterDelete`
AFTER DELETE ON `TechniqueTable`
BEGIN
    DELETE FROM `AudioAttributesTable`
    WHERE `audioAttributesId` = old.`audioAttributesId`
        AND NOT EXISTS
            (SELECT `audioAttributesId` FROM `TechniqueTable`
            WHERE (
                old.`audioAttributesId` IS NOT NULL
                AND `audioAttributesId` = old.`audioAttributesId`)
            );
END;

CREATE TRIGGER IF NOT EXISTS `removeUnusedAudioAttributesAfterUpdate`
AFTER UPDATE ON `TechniqueTable`
BEGIN
    DELETE FROM `AudioAttributesTable`
    WHERE `audioAttributesId` = old.`audioAttributesId`
        AND NOT EXISTS
            (SELECT `audioAttributesId` FROM `TechniqueTable`
            WHERE (
                old.`audioAttributesId` IS NOT NULL
                AND `audioAttributesId` = old.`audioAttributesId`)
            );
END;

getTechnique:
SELECT
    tt.*,
    aat.`name` AS `audioName`,
    aat.durationMillis AS `audioDuration`,
    aat.`path` AS `audioFilePath`
FROM `TechniqueTable` AS tt
LEFT JOIN `AudioAttributesTable` AS aat
    USING (`audioAttributesId`)
WHERE `techniqueId` = :techniqueId;

getTechniqueList:
SELECT
    tt.*,
    aat.`name` AS `audioName`,
    aat.durationMillis AS `audioDuration`,
    aat.`path` AS `audioFilePath`
FROM `TechniqueTable` AS tt
LEFT JOIN `AudioAttributesTable` AS aat
    USING (`audioAttributesId`)
ORDER BY `techniqueId` ASC;

insert:
INSERT OR IGNORE INTO `TechniqueTable`(
    `name`, `num`, `movementType`, `techniqueType`, `audioAttributesId`, `color`
)
VALUES (:name, :num, :isOffense, :techniqueTypeName, :audioAttributes, :color);

update:
UPDATE `TechniqueTable`
SET
    `name` = :name,
    `num` = :number,
    `audioAttributesId` = :audioAttributesId,
    `color` = :color,
    `techniqueType` = :techniqueTypeName,
    `movementType` = :movementType
WHERE `techniqueId` = :techniqueId;

delete:
DELETE FROM `TechniqueTable`
WHERE `techniqueId` = :techniqueId;

deleteAll:
DELETE FROM `TechniqueTable`
WHERE `techniqueId` IN ?;

affectedRow:
SELECT changes();

lastInsertedRowId:
SELECT last_insert_rowid();